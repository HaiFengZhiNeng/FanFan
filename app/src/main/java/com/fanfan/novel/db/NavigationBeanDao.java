package com.fanfan.novel.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.fanfan.novel.model.NavigationBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NAVIGATION_BEAN".
*/
public class NavigationBeanDao extends AbstractDao<NavigationBean, Long> {

    public static final String TABLENAME = "NAVIGATION_BEAN";

    /**
     * Properties of entity NavigationBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SaveTime = new Property(1, long.class, "saveTime", false, "saveTime");
        public final static Property Title = new Property(2, String.class, "title", false, "title");
        public final static Property Datail = new Property(3, String.class, "datail", false, "datail");
        public final static Property PosX = new Property(4, int.class, "posX", false, "posX");
        public final static Property PosY = new Property(5, int.class, "posY", false, "posY");
        public final static Property ImgUrl = new Property(6, String.class, "imgUrl", false, "imgUrl");
        public final static Property Navigation = new Property(7, String.class, "navigation", false, "navigation");
        public final static Property NavigationData = new Property(8, String.class, "navigationData", false, "navigationData");
    }


    public NavigationBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NavigationBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NAVIGATION_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"saveTime\" INTEGER NOT NULL ," + // 1: saveTime
                "\"title\" TEXT," + // 2: title
                "\"datail\" TEXT," + // 3: datail
                "\"posX\" INTEGER NOT NULL ," + // 4: posX
                "\"posY\" INTEGER NOT NULL ," + // 5: posY
                "\"imgUrl\" TEXT," + // 6: imgUrl
                "\"navigation\" TEXT," + // 7: navigation
                "\"navigationData\" TEXT);"); // 8: navigationData
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NAVIGATION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NavigationBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSaveTime());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String datail = entity.getDatail();
        if (datail != null) {
            stmt.bindString(4, datail);
        }
        stmt.bindLong(5, entity.getPosX());
        stmt.bindLong(6, entity.getPosY());
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(7, imgUrl);
        }
 
        String navigation = entity.getNavigation();
        if (navigation != null) {
            stmt.bindString(8, navigation);
        }
 
        String navigationData = entity.getNavigationData();
        if (navigationData != null) {
            stmt.bindString(9, navigationData);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NavigationBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getSaveTime());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String datail = entity.getDatail();
        if (datail != null) {
            stmt.bindString(4, datail);
        }
        stmt.bindLong(5, entity.getPosX());
        stmt.bindLong(6, entity.getPosY());
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(7, imgUrl);
        }
 
        String navigation = entity.getNavigation();
        if (navigation != null) {
            stmt.bindString(8, navigation);
        }
 
        String navigationData = entity.getNavigationData();
        if (navigationData != null) {
            stmt.bindString(9, navigationData);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NavigationBean readEntity(Cursor cursor, int offset) {
        NavigationBean entity = new NavigationBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // saveTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // datail
            cursor.getInt(offset + 4), // posX
            cursor.getInt(offset + 5), // posY
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imgUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // navigation
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // navigationData
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NavigationBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSaveTime(cursor.getLong(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDatail(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPosX(cursor.getInt(offset + 4));
        entity.setPosY(cursor.getInt(offset + 5));
        entity.setImgUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNavigation(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNavigationData(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NavigationBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NavigationBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NavigationBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
